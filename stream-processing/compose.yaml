services:
  kafka-1:
    image: confluentinc/cp-kafka:7.6.1
    hostname: kafka-1
    container_name: kafka-1
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      CLUSTER_ID: YK72Kb7uM0qmTrBexPL3Tg
      
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: CONTROLLER://kafka-1:29093,PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:29093,2@kafka-2:29093,3@kafka-3:29093
  
  kafka-2:
    image: confluentinc/cp-kafka:7.6.1
    hostname: kafka-2
    container_name: kafka-2
    depends_on:
      - kafka-1
    #    condition: service_healthy
    ports:
      - "9093:9092"
      - "9102:9101"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 2
      CLUSTER_ID: YK72Kb7uM0qmTrBexPL3Tg
      
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: CONTROLLER://kafka-2:29093,PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:29093,2@kafka-2:29093,3@kafka-3:29093
  
  kafka-3:
    image: confluentinc/cp-kafka:7.6.1
    hostname: kafka-3
    container_name: kafka-3
    depends_on:
      - kafka-1
      - kafka-2
    ports:
      - "9094:9092"
      - "9103:9101"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 3
      CLUSTER_ID: YK72Kb7uM0qmTrBexPL3Tg
      
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: CONTROLLER://kafka-3:29093,PLAINTEXT://kafka-3:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:29093,2@kafka-2:29093,3@kafka-3:29093

  init-kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      /usr/bin/kafka-topics --bootstrap-server kafka-1:9092,kafka-2:9093,kafka-3:9094 --topic cryptoQuote --if-not-exists --replication-factor 1 partitions 1 --config cleanup.policy=delete --config delete.retention.ms=10800000 --config retention.ms=10800000 --config segment.ms=10800000 --create
      /usr/bin/kafka-topics --bootstrap-server kafka-1:9092,kafka-2:9093,kafka-3:9094 --topic cryptoTrade --if-not-exists --replication-factor 1 partitions 1 --config cleanup.policy=delete --config delete.retention.ms=10800000 --config retention.ms=10800000 --config segment.ms=10800000 --create
      /usr/bin/kafka-topics --bootstrap-server kafka-1:9092,kafka-2:9093,kafka-3:9094 --topic cryptoOrderbook --if-not-exists --replication-factor 1 partitions 1 --config cleanup.policy=delete --config delete.retention.ms=10800000 --config retention.ms=10800000 --config segment.ms=10800000 --create
      /usr/bin/kafka-topics --bootstrap-server kafka-1:9092,kafka-2:9093,kafka-3:9094 --topic testOrderbook --if-not-exists --replication-factor 1 partitions 1 --config cleanup.policy=delete --config delete.retention.ms=10800000 --config retention.ms=10800000 --config segment.ms=10800000 --create
      /usr/bin/kafka-topics --bootstrap-server kafka-1:9092,kafka-2:9093,kafka-3:9094 --topic orderbookChange --if-not-exists --replication-factor 1 partitions 1 --config cleanup.policy=delete --config delete.retention.ms=10800000 --config retention.ms=10800000 --config segment.ms=10800000 --create
      /usr/bin/kafka-topics --bootstrap-server kafka-1:9092,kafka-2:9093,kafka-3:9094 --list
      "
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - schema-registry

    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9092,kafka-2:9093,kafka-3:9094
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8084

  
  schema-registry:
    image: bitnami/schema-registry:7.2
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - "8081:8081"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      - SCHEMA_REGISTRY_KAFKA_BROKERS=PLAINTEXT://kafka-1:9092,PLAINTEXT://kafka-2:9092,PLAINTEXT://kafka-3:9092
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8084
      - SCHEMA_REGISTRY_DEBUG=true
    
  init-schema:
    build:
      context: ./avro-store
      dockerfile: Dockerfile
    depends_on:
      - schema-registry
      - kafka-1
      - init-kafka
    volumes:
      - ./avro-store:/avro-store
    entrypoint: [ "/bin/sh", "/avro-store/setup.sh" ]
    
  alpaca-crypto-producer:
    build: ./alpaca-crypto-client
    hostname: alpaca-crypto-producer
    container_name: alpaca-crypto-producer
    environment:
      - CLIENT_TYPE=producer
      - KAFKA_BROKER_URL=kafka-1:9092,kafka-2:9092,kafka-3:9092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8084
    volumes:
      - .env:/app/.env
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - schema-registry
    
  #alpaca-crypto-consumer:
  #  build: ./alpaca-crypto-client
  #  hostname: alpaca-crypto-consumer
  #  container_name: alpaca-crypto-consumer
  #  depends_on:
  #    - kafka-1
  #    - kafka-2
  #    - kafka-3
  #    - schema-registry
  #  volumes:
  #    - ./data:/app/data
  #  environment:
  #    - CLIENT_TYPE=consumer
  
  #orderbook-replay:
  #  build: ./alpaca-crypto-client
  #  hostname: orderbook-replay
  #  container_name: orderbook-replay
  #  depends_on:
  #    - kafka-1
  #    - kafka-2
  #    - kafka-3
  #    - schema-registry
  #    #- alpaca-crypto-producer
  #    #- alpaca-crypto-consumer
  #  volumes:
  #    - ./data:/app/data
  #  environment:
  #    - CLIENT_TYPE=replay
    
  #orderbook-test:
  #  build: ./alpaca-crypto-client
  #  hostname: orderbook-test
  #  container_name: orderbook-test
  #  depends_on:
  #    - kafka-1
  #    - kafka-2
  #    - kafka-3
  #    - schema-registry
  #    #- alpaca-crypto-producer
  #    #- alpaca-crypto-consumer
  # volumes:
  #    - ./data:/app/data
  #  environment:
  #    - CLIENT_TYPE=test
  
  lob-aggregator:
    build:
      context: ./feature-generator
      dockerfile: faust.Dockerfile
    container_name: lob-aggregator
    hostname: lob-aggregator
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - schema-registry
    volumes:
      - ./feature-generator/app:/home/appuser/app
    entrypoint: ['faust', '-A', 'app.main', 'worker', '-l', 'info']


  #jobmanager:
  #  build: 
  #    context: ./pyflink-service
  #    dockerfile: pyflink.Dockerfile
  #  container_name: jobmanager
  #  hostname: jobmanager
  #  ports:
  #    - "8085:8081"
  #  command: jobmanager
  #  depends_on:
  #    - schema-registry
  #    - orderbook-test
  #    #- orderbook-replay
  #  volumes:
  #    - ./f5/src:/opt/flink/src
  #  environment:
  #    - |
  #      FLINK_PROPERTIES=
  #      jobmanager.rpc.address: jobmanager        

  #taskmanager:
  #  build: 
  #    context: ./pyflink-service
  #    dockerfile: pyflink.Dockerfile
  #  container_name: taskmanager
  #  hostname: taskmanager
  #  depends_on:
  #    - jobmanager
  #  command: taskmanager
  # scale: 1
  #  environment:
  #    - |
  #      FLINK_PROPERTIES=
  #      jobmanager.rpc.address: jobmanager
  #      taskmanager.numberOfTaskSlots: 2       

  clickhouse:
    image: clickhouse/clickhouse-server:23.8.14-alpine
    user: 101:101
    container_name: clickhouse
    hostname: clickhouse
    volumes:
      - ${PWD}/clickhouse/clickhouse/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ${PWD}/clickhouse/clickhouse/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml
      - ${PWD}/clickhouse/clickhouse/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ~/data/clickhouse:/var/lib/clickhouse
    ports:
      - 8123:8123
      - 9000:9000
    depends_on:
      - clickhouse-keeper
  clickhouse-keeper:
    image: clickhouse/clickhouse-keeper:23.8.14-alpine
    user: 101:101
    container_name: clickhouse-keeper
    hostname: clickhouse-keeper
    volumes:
      - ${PWD}/clickhouse/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml
    ports:
      -  9181:9181